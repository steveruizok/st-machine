{"moduleFile":{"sourceFilePath":"/Users/stephenruiz/GitHub/st-machine/src/components/demo-traffic-light/demo-traffic-light.tsx","localImports":["/Users/stephenruiz/GitHub/st-machine/src/st-machine"],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"demo-traffic-light","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/stephenruiz/GitHub/st-machine/src/components/demo-traffic-light/demo-traffic-light.css","cmpRelativePath":"demo-traffic-light.css","originalComponentPath":"demo-traffic-light.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DemoTrafficLight","documentation":"","type":"typeof DemoTrafficLight"},"encapsulation":0,"componentClass":"DemoTrafficLight","membersMeta":{"mState":{"memberType":5}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/stephenruiz/GitHub/st-machine/src/components/demo-traffic-light/demo-traffic-light.js"},"jsText":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport StateMachine from \"../../st-machine\";\r\nconst stateMap = {\r\n    initial: \"off\",\r\n    states: [\r\n        {\r\n            name: \"off\",\r\n            states: [\r\n                {\r\n                    name: \"default\",\r\n                    transitions: [{ action: \"hover\", response: \"hovered\" }]\r\n                },\r\n                {\r\n                    name: \"hovered\",\r\n                    transitions: [\r\n                        { action: \"unhover\", response: \"off\" },\r\n                        { action: \"click\", response: \"on.hovered\" }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"on\",\r\n            states: [\r\n                {\r\n                    name: \"default\",\r\n                    transitions: [{ action: \"hover\", response: \"hovered\" }]\r\n                },\r\n                {\r\n                    name: \"hovered\",\r\n                    transitions: [\r\n                        { action: \"unhover\", response: \"on\" },\r\n                        { action: \"click\", response: \"off.hovered\" }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\nconst Machine = new StateMachine(stateMap);\r\nexport class DemoTrafficLight {\r\n    static get is() { return \"demo-traffic-light\"; }\r\n    static get properties() { return {\r\n        \"mState\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:demo-traffic-light:**/\"; }\r\n}\r\n__decorate([\r\n    componentWillLoad()\r\n], DemoTrafficLight.prototype, \"\", void 0);\r\n{\r\n    Machine.subscribe(this);\r\n}\r\nrender();\r\n{\r\n    return (h(\"div\", null,\r\n        h(\"p\", null, \"Hello DemoTrafficLight!\")));\r\n}\r\n"}